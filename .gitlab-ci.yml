stages:
  - build

build:docker:image:
  stage: build
  image: docker:stable
  dependencies: []  #don't depend on explicit artifacts from any previous job
  # tags:
  #   - docker-build-cache
  services:
    - docker:dind
  script:
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY
    - docker build -f ./devops/docker/Dockerfile -t $DOCKER_REGISTRY_PROJECT_PATH:latest -t $DOCKER_REGISTRY_PROJECT_PATH:$PACKAGE_VERSION .
    - docker push $DOCKER_REGISTRY_PROJECT_PATH:$PACKAGE_VERSION
    - docker push $DOCKER_REGISTRY_PROJECT_PATH:latest

# deploy:octopus:kubernetes:
#   extends: .prepare:versions
#   stage: deploy
#   variables:
#     GIT_STRATEGY: none  #no need to clone
#   image: octopusdeploy/octo
#   dependencies: []  #don't depend on explicit artifacts from any previous job
#   tags:
#     - docker-build-cache
#   services:
#     - docker:dind
#   script:
#     - echo 'function octo(){ dotnet /octo/Octo.dll "$@" ;}' >> ~/.bashrc
#     - source ~/.bashrc
#     - octo create-release --project="$OCTOPUS_PROJECT" --releaseNumber="$RELEASE_VERSION" --packageversion="$PACKAGE_VERSION" --server="$OCTOPUS_SERVER"  --apiKey="$OCTOPUS_API_KEY"
#     - octo deploy-release --project="$OCTOPUS_PROJECT" --deployto="$DEPLOY_ENVIRONMENT" --version="$RELEASE_VERSION" --server="$OCTOPUS_SERVER"  --apiKey="$OCTOPUS_API_KEY"